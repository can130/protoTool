// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
class mymsg;
class mymsgDefaultTypeInternal;
extern mymsgDefaultTypeInternal _mymsg_default_instance_;
class mytag;
class mytagDefaultTypeInternal;
extern mytagDefaultTypeInternal _mytag_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::mymsg* Arena::CreateMaybeMessage<::mymsg>(Arena*);
template<> ::mytag* Arena::CreateMaybeMessage<::mytag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class mytag :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mytag) */ {
 public:
  mytag();
  virtual ~mytag();

  mytag(const mytag& from);
  mytag(mytag&& from) noexcept
    : mytag() {
    *this = ::std::move(from);
  }

  inline mytag& operator=(const mytag& from) {
    CopyFrom(from);
    return *this;
  }
  inline mytag& operator=(mytag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mytag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mytag* internal_default_instance() {
    return reinterpret_cast<const mytag*>(
               &_mytag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(mytag& a, mytag& b) {
    a.Swap(&b);
  }
  inline void Swap(mytag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mytag* New() const final {
    return CreateMaybeMessage<mytag>(nullptr);
  }

  mytag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mytag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mytag& from);
  void MergeFrom(const mytag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mytag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mytag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // int32 tag = 1;
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int32 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mytag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class mymsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mymsg) */ {
 public:
  mymsg();
  virtual ~mymsg();

  mymsg(const mymsg& from);
  mymsg(mymsg&& from) noexcept
    : mymsg() {
    *this = ::std::move(from);
  }

  inline mymsg& operator=(const mymsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline mymsg& operator=(mymsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const mymsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const mymsg* internal_default_instance() {
    return reinterpret_cast<const mymsg*>(
               &_mymsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(mymsg& a, mymsg& b) {
    a.Swap(&b);
  }
  inline void Swap(mymsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline mymsg* New() const final {
    return CreateMaybeMessage<mymsg>(nullptr);
  }

  mymsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<mymsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const mymsg& from);
  void MergeFrom(const mymsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(mymsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mymsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kTagFieldNumber = 3,
    kLenFieldNumber = 1,
  };
  // repeated int32 type = 2;
  int type_size() const;
  private:
  int _internal_type_size() const;
  public:
  void clear_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_type() const;
  void _internal_add_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 type(int index) const;
  void set_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_type();

  // .mytag tag = 3;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::mytag& tag() const;
  ::mytag* release_tag();
  ::mytag* mutable_tag();
  void set_allocated_tag(::mytag* tag);
  private:
  const ::mytag& _internal_tag() const;
  ::mytag* _internal_mutable_tag();
  public:

  // int32 len = 1;
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mymsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > type_;
  mutable std::atomic<int> _type_cached_byte_size_;
  ::mytag* tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// mytag

// int32 tag = 1;
inline void mytag::clear_tag() {
  tag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mytag::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mytag::tag() const {
  // @@protoc_insertion_point(field_get:mytag.tag)
  return _internal_tag();
}
inline void mytag::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tag_ = value;
}
inline void mytag::set_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:mytag.tag)
}

// -------------------------------------------------------------------

// mymsg

// int32 len = 1;
inline void mymsg::clear_len() {
  len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mymsg::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mymsg::len() const {
  // @@protoc_insertion_point(field_get:mymsg.len)
  return _internal_len();
}
inline void mymsg::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  len_ = value;
}
inline void mymsg::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:mymsg.len)
}

// repeated int32 type = 2;
inline int mymsg::_internal_type_size() const {
  return type_.size();
}
inline int mymsg::type_size() const {
  return _internal_type_size();
}
inline void mymsg::clear_type() {
  type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mymsg::_internal_type(int index) const {
  return type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 mymsg::type(int index) const {
  // @@protoc_insertion_point(field_get:mymsg.type)
  return _internal_type(index);
}
inline void mymsg::set_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:mymsg.type)
}
inline void mymsg::_internal_add_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  type_.Add(value);
}
inline void mymsg::add_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_type(value);
  // @@protoc_insertion_point(field_add:mymsg.type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
mymsg::_internal_type() const {
  return type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
mymsg::type() const {
  // @@protoc_insertion_point(field_list:mymsg.type)
  return _internal_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
mymsg::_internal_mutable_type() {
  return &type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
mymsg::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:mymsg.type)
  return _internal_mutable_type();
}

// .mytag tag = 3;
inline bool mymsg::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool mymsg::has_tag() const {
  return _internal_has_tag();
}
inline void mymsg::clear_tag() {
  if (GetArenaNoVirtual() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
inline const ::mytag& mymsg::_internal_tag() const {
  const ::mytag* p = tag_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mytag*>(
      &::_mytag_default_instance_);
}
inline const ::mytag& mymsg::tag() const {
  // @@protoc_insertion_point(field_get:mymsg.tag)
  return _internal_tag();
}
inline ::mytag* mymsg::release_tag() {
  // @@protoc_insertion_point(field_release:mymsg.tag)
  
  ::mytag* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::mytag* mymsg::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::mytag>(GetArenaNoVirtual());
    tag_ = p;
  }
  return tag_;
}
inline ::mytag* mymsg::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:mymsg.tag)
  return _internal_mutable_tag();
}
inline void mymsg::set_allocated_tag(::mytag* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tag_;
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:mymsg.tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
